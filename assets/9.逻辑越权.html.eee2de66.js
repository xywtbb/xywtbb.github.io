import{_ as i,V as e,W as a,Z as r}from"./framework.0d0b2430.js";const l={},p=r('<h1 id="逻辑越权" tabindex="-1"><a class="header-anchor" href="#逻辑越权" aria-hidden="true">#</a> 逻辑越权</h1><p>**定义：**该漏洞是指应用在检查授权时存在纰漏，使得攻击者在获得低权限用户账户后，利用一些方式绕过权限检查，访问或者操作其他用户或者更高权限。</p><p>**成因：**主要是因为开发人员在对数据进行增、删、改、查询时对客户端请求的数据过分相信而遗漏了权限的判定。在实际的代码审计中，这种漏洞往往很难通过工具进行自动化监测，因此在实际应用中危害很大。</p><hr><h2 id="水平越权" tabindex="-1"><a class="header-anchor" href="#水平越权" aria-hidden="true">#</a> 水平越权</h2><p><strong>定义：</strong></p><p>通过更换的某个ID之类的身份标识，从而使A账号获取（修改、删除等）B账号数据。（指相同权限下不同的用户可以相互访问）</p><p><strong>原理：</strong></p><p>前端安全造成：界面</p><p>判断用户等级后，代码界面部分进行可选显示。</p><p>后端安全造成：数据库</p><p>user表（管理员和普通用户同表）</p><p>id, username, password, usertype</p><p>1, admin, 123456, 1</p><p>2, xiaodi, 11111, 2</p><p>登录用户admin或xiaodi时，代码是如何验证这个级别？（usertype判断）</p><p>如果在访问数据包中有传输用户的编号、用户组编号或类型编号的时候，那么尝试对这个值进行修改，就是测试越权漏洞的基本。</p><p><strong>修复防御方案：</strong></p><ol><li>前后端同时对用户输入信息进行校验，双重验证机制。</li><li>调用功能前验证用户是否有权限调用相关功能。</li><li>执行关键操作前必须验证用户身份，验证用户是否具备操作数据的权限。</li><li>直接对象引用的加密资源ID，防止攻击者枚举ID，敏感数据特殊化处理。</li><li>永远不要相信来自用户的输入，对于可控参数进行严格的检查与过滤。</li></ol><p><strong>测试标准流程：</strong></p><ol><li>针对不正确的获取账号ID测试用例</li></ol><ul><li>get、post参数内是否有userid <ul><li>无--测试通过无问题</li><li>有--执行下一步测试判断是否为假参数</li></ul></li><li>请求参数内有当前用户的userid，删除该参数判断接口返回 <ul><li>接口正常执行（表示此参数为假参数、未使用）--测试通过</li><li>接口异常（表示后端错误使用userid）--存在越权</li></ul></li></ul><ol start="2"><li>针对未实现用户与权限间校验的测试用例</li></ol><ul><li><p>资源ID替换后，重放请求（用户1-动作1-对象id1 替换成 用户1-动作1-对象id2）</p><ul><li>接口运行异常，无法正常完成功能--测试通过。</li><li>接口运行效果一致--存在越权。</li></ul></li></ul><hr><h2 id="垂直越权" tabindex="-1"><a class="header-anchor" href="#垂直越权" aria-hidden="true">#</a> 垂直越权</h2><p><strong>定义：</strong></p><p>使用低权限身份的账号，发送高权限账号才能有的请求，获得其高权限得操作。（指使用权限低的用户可以访问到权限较高的用户）</p><p><strong>垂直越权之添加用户</strong></p><p>前提条件：获取添加用户的数据包</p><p>怎么来的数据包：</p><ol><li>普通用户前端有操作界面可以抓取数据包</li><li>通过网站源码本地搭建自己去模拟抓取</li><li>盲猜</li></ol><hr><h2 id="未授权访问" tabindex="-1"><a class="header-anchor" href="#未授权访问" aria-hidden="true">#</a> 未授权访问</h2><p><strong>定义：</strong></p><p>通过删除请求中的认证信息后重放该请求，依旧可以访问或者完成操作。未授权访问，严格意义上这个不属于越权漏洞，但是在日常测试中常常会遇见。即只要输入正确的网址就可以访问，例如admin默认是登录，登录后跳转到user.php,然后你直接访问user.php，发现你直接有后台的权限。</p><p>未授权访问产生的原因是因为开发在后台代码中没有验证用户状态（是否已经登录，例如可以通过isset($_SESSION[&#39;username&#39;])来判断用户是否是登录状态）</p><h2 id="常见的越权漏洞" tabindex="-1"><a class="header-anchor" href="#常见的越权漏洞" aria-hidden="true">#</a> 常见的越权漏洞</h2><ol><li>通过修改get传参来进行越权；</li><li>通过修改post传参来进行越权；</li><li>通过cookie传参来进行越权；</li><li>未授权访问；</li></ol><hr><hr><h2 id="登录脆弱及支付篡改" tabindex="-1"><a class="header-anchor" href="#登录脆弱及支付篡改" aria-hidden="true">#</a> 登录脆弱及支付篡改</h2><p><strong>数据篡改安全问题：</strong></p><ul><li><p>商品购买流程：</p><ul><li>选择商品和数量-选择支付及配送方式-生成订单编号-订单支付选择-完成支付。</li></ul></li><li><p>常见篡改参数：</p><ul><li>商品编号ID，购买价格，购买数量，支付方式，订单号，支付状态等。</li></ul></li><li><p>常见修改方法：</p><ul><li>替换支付，重复支付，最小额支付，负数支付，溢出支付，优惠券支付等。</li></ul></li></ul><p><strong>HTTP和HTTPS协议密文抓取</strong></p><p>HTTP协议的数据包中在用户密码参数部分是明文显示，而HTTPS协议的数据包中用户密码参数部分是密文。</p><p><strong>后台登录账号密码爆破测试</strong></p><p>使用burp抓登录请求的数据包，使用burp中的intruder模块，在payloads中设置密码字典，payload processing中可以设置给密码加密，从而暴力破解。</p><p><strong>Cookie脆弱点验证修改测试</strong></p><p>通过审计网站源码，发现登录时存在登录漏洞，然后更改cookie。</p><hr><h2 id="找回机制及接口安全" tabindex="-1"><a class="header-anchor" href="#找回机制及接口安全" aria-hidden="true">#</a> 找回机制及接口安全</h2><h3 id="找回机制" tabindex="-1"><a class="header-anchor" href="#找回机制" aria-hidden="true">#</a> 找回机制：</h3><p>客户端回显，Response状态值，验证码爆破，找回流程绕过等。</p><h3 id="接口调用乱用" tabindex="-1"><a class="header-anchor" href="#接口调用乱用" aria-hidden="true">#</a> 接口调用乱用：</h3><p>短信轰炸，来电轰炸等。</p><hr><h2 id="验证码与token及接口" tabindex="-1"><a class="header-anchor" href="#验证码与token及接口" aria-hidden="true">#</a> 验证码与Token及接口</h2><h3 id="验证码安全" tabindex="-1"><a class="header-anchor" href="#验证码安全" aria-hidden="true">#</a> 验证码安全</h3><p>分类：图片，手机或邮箱，语音，视频，操作等</p><p>原理：验证生成或验证过程中的逻辑问题</p><p>危害：账户权限泄露，短信轰炸，遍历，任意用户操作等</p><p>漏洞：客户端回显(已讲)，验证码复用，验证码爆破(已讲)，绕过等</p><h3 id="token安全" tabindex="-1"><a class="header-anchor" href="#token安全" aria-hidden="true">#</a> token安全</h3><p>主要是验证中可存在绕过可继续后续测试，token爆破，token客户端回显等。</p><h3 id="验证码识别插件工具使用" tabindex="-1"><a class="header-anchor" href="#验证码识别插件工具使用" aria-hidden="true">#</a> 验证码识别插件工具使用</h3><p>captcha-killer，Pkav_Http_Fuzz,reCAPTCHA等</p>',67),h=[p];function n(t,d){return e(),a("div",null,h)}const o=i(l,[["render",n],["__file","9.逻辑越权.html.vue"]]);export{o as default};
