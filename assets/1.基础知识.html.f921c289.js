import{_ as s,V as i,W as o,X as r,Y as e,$ as a,Z as t,y as l}from"./framework.0d0b2430.js";const h={},b=r("h1",{id:"web安全基础知识",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#web安全基础知识","aria-hidden":"true"},"#"),e(" Web安全基础知识")],-1),p=r("h2",{id:"域名",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#域名","aria-hidden":"true"},"#"),e(" 域名")],-1),d=r("li",null,[r("p",null,[e("什么是域名？"),r("br"),e(" IP地址的名称成为域名。例如："),r("a",{href:"www.baidu.com"},"www.baidu.com")])],-1),c=r("li",null,[r("p",null,[e("域名在哪注册？"),r("br"),e(" 第三方网站注册。例：万网（"),r("a",{href:"www.net.com"},"www.net.com"),e("）")])],-1),g=r("br",null,null,-1),u=r("br",null,null,-1),x={href:"http://news.baidu.com",target:"_blank",rel:"noopener noreferrer"},S={href:"http://shehui.news.baidu.com",target:"_blank",rel:"noopener noreferrer"},w=r("li",null,[r("p",null,[e("域名发现对于安全测试意义？"),r("br"),e(" 当主站域名无法找到漏洞的时候，从多级域名寻找突破口。二级域名和一级域名是有关联的，在进行渗透的时候如果一级域名无法下手，可以考虑二级域名。")])],-1),P=t('<h2 id="dns" tabindex="-1"><a class="header-anchor" href="#dns" aria-hidden="true">#</a> DNS</h2><ol><li><p>什么是DNS<br> DNS就是域名系统服务协议，把域名解析成 IP 地址。</p></li><li><p>本地Hosts与DNS的关系<br> 重定向IP地址，网站在解析IP地址的时候会先到hosts查看有没有IP地址，如果没有再去互联网DNS服务器上解析。<br> Hosts的地址：C：\\Windows\\System32\\drivers\\etc\\hosts<br> 本地hosts：当在 cmd 中 ping 一个域名的时候，会先在本地hosts里寻找有没有该域名对应的IP地址。如果没有才回去互联网上的DNS服务器进行解析。<br><strong>网络钓鱼攻击</strong>：就是使用更改本地域名对应的 IP 地址，然后让用户访问网站的服务器发生改变，从而实施网络钓鱼攻击。<br><strong>游戏加速的原理</strong>：服务商把国外域名的 IP 换成国内加速的 IP （节点或者说是缓存地址），然后在加速的时候就从国内访问国外变成国内访问服务商的国内节点或者国内缓存地址，从而实现加速。</p></li><li><p>CDN是什么？与DNS的关系？<br> CDN（内容分发网络）：采用更多的缓存服务器（ CDN 边缘节点），布放在用户访问相对集中的地区或网络中。当用户访问网站时，利用全局负载技术，将用户的访问指向距离最近的缓存服务器上，由缓存服务器响应用户请求。</p></li><li><p>常见的DNS安全攻击有哪些？<br> DNS被攻击会造成大量的用户上网时被恶意解析指向</p></li></ol><h2 id="脚本语言" tabindex="-1"><a class="header-anchor" href="#脚本语言" aria-hidden="true">#</a> 脚本语言</h2><ol><li>常见的脚本语言类型有哪些？<br> asp、php、aspx、jsp、javaweb、pl、py、cgi等。<br> 主流：PHP、Java web框架（Spring）、python web框架（Django）。</li><li>不同脚本类型与安全漏洞的关系？<br> 程序源代码语言的选择将决定这套程序源码漏洞发现上的几率。<br> php:适合小中型网站开发 java：适合中大型项目开发。</li><li>漏洞挖掘、代码审计与脚本类型的关系？<br> 漏洞挖掘和代码审计需要熟悉主流的脚本语言，不同的脚本语言，有不同的优缺点，因此找漏洞的方向不同。</li></ol><h2 id="后门" tabindex="-1"><a class="header-anchor" href="#后门" aria-hidden="true">#</a> 后门</h2><ol><li>什么是后门?有哪些后门？<br> 遗留后门文件，便于下次再进行操作。基于网站后门、基于服务器后门、基于深层次的后门。</li><li>后门在安全测试中的实际意义？<br> 方便下次再次进入，获取相关权限的时候后门就是操作管道。</li><li>关于后门需要了解哪些？（玩法和免杀）<br> 深知攻击型再反侦察，防止被相关软件识别到。</li></ol><h2 id="web相关组成" tabindex="-1"><a class="header-anchor" href="#web相关组成" aria-hidden="true">#</a> Web相关组成</h2><ol><li><p>Web的组成架构模型<br> 网站源码：分脚本类型，分应用方向。<br> 操作系统：Windows、Linux。<br> 中间件：Apache、IIS、Tomcat、Nginx等。<br> 数据库：Access、MySQL、MsSQL、Oracle、Sybase、DB2、PostSQL等。<br> 因为网站服务面广，所以从Web层面为主。</p></li><li><p>Web网站安全漏洞</p></li><li><p>源码类对应漏洞：<br> SQL注入、文件上传、xss、代码执行、变量覆盖、逻辑漏洞、反序列化等。</p></li><li><p>中间件对应漏洞：<br> 未授权访问。</p></li><li><p>数据库对应漏洞:<br> 内核漏洞。</p></li><li><p>系统层对应漏洞：<br> 提权漏洞、远程代码执行。</p></li><li><p>其他第三方对应漏洞：<br> 电脑第三方软件。</p></li><li><p>APP或PC应有结合类:<br> 移动端、PC端、网页端。</p></li></ol><h3 id="request请求数据包数据格式" tabindex="-1"><a class="header-anchor" href="#request请求数据包数据格式" aria-hidden="true">#</a> Request请求数据包数据格式</h3><ol><li>请求行：请求类型/请求资源路径、协议的版本和类型。<br> 请求行由三个标记组成：请求方法、请求URL和HTTP版本，它们用空格分享。</li></ol><blockquote><p>例如：GET / index.html HTTP / 1.1。<br> HTTP：规划定义了 8 种可能的请求方法。<br> GET：检索 URL 中标识资源的一个简单请求。<br> HEAD：与 GET 方法相同，服务器只返回状态行和头标，并不返回请求文档。<br> POST：服务器接受被写入客户端输出流中的数据的请求。<br> PUT：服务器保存请求数据作为指定 URL 新内容的请求。<br> DELETE：服务器删除 URL 中命令资源的请求。<br> OPTIONS：关于服务器支持的请求方法信息的请求。<br> TRACE： Web 服务器反馈 HTTP 请求和其头标的请求。<br> CONNECT：已文档化，但当前未实现的一个方法，预留做隧道处理。</p></blockquote><ol start="2"><li>请求头：一些键值对，浏览器与web服务器之间都可以发送，特定的某种含义。 由关键字/值对组成，每行一对，关键字和值用冒号分享。请求头标通知服务器腾于客户端的功能和标识。</li></ol><ul><li>Host：主机或域名地址。</li><li>Accept：指浏览器或其他客户可以接受的MIME文件格式。Servlet可以根据它判断并返回适当的文件格式。</li><li>User-Agent：是客户浏览器名称。</li><li>Host：对应网址URL中的Web名称和端口号。</li><li>Accept-Langeuage：指出浏览器可以接受的语言种类，如en或en-us，指英语。 Connection：用来告诉服务器是否可以维持固定的HTTP连接。HTTP是无连接的，HTTP / 1.1 使用 Keep-Alive 为默认值，这样，当浏览器需要多个文件时（比如一个HTML文件和相关的图形文件），不需要每次都建立连接。</li><li>Cookie：浏览器用这个属性向服务器发送Cookie。Cookie是在浏览器中寄存的小型数据体，它可以记载和服务器相关的用户信息，也可以用来实现会话功能。</li><li>Referer：表明产生请求的网页URL。比如从网页 / icconcept / index.jsp 中点击一个链接到网页 / icwork / search，在向服务器发送的 GET/icwork/search中的请求中，Referer是http：// hostname：8080 / icconcept / index.jsp。这个属性可以用来跟踪Web请求是从什么网站来的。</li><li>Content-Type：用来表示request的内容类型。可以用HttpServletRequest的getContentType（）方法取得。</li><li>Accept-Charset：指出浏览器可以接受的字符编码。英文浏览器的默认值是ISO-8859-1。</li><li>Accept-Encoding：指出浏览器可以接受的编码方式。编码方式不同于文件格式，它是为了压缩文件并加速文件传递速度。浏览器在接收到Web响应之后先解码，然后再检查文件格式。</li></ul><ol start="3"><li>空行：请求头与请求体之间用一个空行隔开。最后一个请求头标之后是空行，发送回车符和退行，通知服务器以下不再有头标。</li><li>请求体：要发送的数据（一般post提交会使用）。<br> 例：user=123&amp;pass=123。<br> 使用POST传送，最常使用的是Content-Type和Content-Length头标。</li></ol><h3 id="response返回数据包数据格式" tabindex="-1"><a class="header-anchor" href="#response返回数据包数据格式" aria-hidden="true">#</a> Response返回数据包数据格式</h3><p>一个响应由四个部分组成：状态行、响应头标、空行、响应数据。<br> 状态行：协议版本、数字形式的状态代码和状态描述，个元素之间以空格分隔。<br> HTTP 响应码：<br> 1xx：信息，请求收到，继续处理。<br> 2xx：成功，行为被成功的接受、理解和采纳。<br> 3xx：重定向，为了完成请求，必须进一步执行的动作。<br> 4xx：客户端错误。<br> 5xx：服务器错误。</p><p>200 存在文件<br> 403 存在文件夹<br> 3xx 均可能存在<br> 404 不存在文件及文件夹<br> 500 均可能存在</p><p>响应头标：包含服务器类型、日期、长度、内容类型等。<br> 像请求头标一样，他们指出服务器的功能，标识出响应数据的细节。<br> 空行：响应头与响应体之间用空行隔开。<br> 最后一个响应头标之后是一个空行，发送回车符和退行，表明服务器以下不再有头标。<br> 响应数据：浏览器会将实体内容中的数据取出来，生成相应的页面。<br> HTML 文档和图像等，也就是 HTML 本身。</p><h2 id="web网站的安全问题" tabindex="-1"><a class="header-anchor" href="#web网站的安全问题" aria-hidden="true">#</a> Web网站的安全问题</h2><h3 id="搭建平台中间件等安全问题" tabindex="-1"><a class="header-anchor" href="#搭建平台中间件等安全问题" aria-hidden="true">#</a> 搭建平台中间件等安全问题</h3><p><strong>1.域名IP目录解析安全问题</strong></p><p>IP地址访问可以发现更多的信息同时经常能找到程序源码备份文件和敏感信息，而域名访问只能发现一个文件夹下的所有文件。网站搭建的时候支持IP访问和域名访问，域名访问的时候一般只会指向某个目录，IP访问的时候指向的是根目录。</p><p><strong>2.常见文件后缀解析对应安全</strong></p><p>指定后缀名对应某个文件，访问网站出现遇到不能解析的文件就是中间件可能默认或者添加某些设置导致解析时出现问题。</p><p><strong>3.常见安全测试中的安全防护</strong></p><p>学校内网和企业内外会出现。会限制外部人员访问内部的网站，限制IP地址，规范访问者的权限。</p><p><strong>4.WEB后门与用户及文件权限</strong></p><p>文件夹设置相关权限，禁止来宾用户的权限，导致连接的后门看不到任何东西，它属于防护技巧，同时也是安全测试里经常碰到的问题</p><p>绕过思路：将后门试着放在其他可以执行的目录。比如，网站根目录或者其他有脚本存放的目录下面。</p><p><strong>5.基于中间件的简要识别</strong></p><p>通过抓取数据包的返回结果，查询搭建平台信息。一般在Response Headers的Server中。</p><h3 id="web源码的安全问题" tabindex="-1"><a class="header-anchor" href="#web源码的安全问题" aria-hidden="true">#</a> Web源码的安全问题</h3><p><strong>1.关于Web源码目录结构</strong><br> 数据库配置文件，后台目录，模板目录，数据库目录等<br> index.php 根据文件后缀判定<br> admin 网站后台路径<br> data 数据相关目录<br> install 安装目录<br> member 会员目录<br> template 模板目录(和网站相关的整体架构)<br> data =&gt; confing.php 数据库配置文件，网站和数据库的通讯信息，连接账号密码，可以去连接对方数据库，从数据库去得到这个网站的源码里面涉及到的管理员的账号密码。</p><p><strong>2.关于Web源码脚本类型</strong><br> ASP,PHP,ASPX,JSP,JAVA WEB等脚本类型源码安全问题</p><p><strong>3.关于Web源码应用分类</strong><br> 社交，论坛，门户，第三方，博客等不同的代码机制对应漏洞<br> 开源，未开源问题，框架非框架问题，关于CMS识别问题及后续等<br> 拿到对方的源码或者判断这个网站的应用类型之后应该侧重在哪些漏洞上做文章</p><p><strong>4.关于Web源码其他说明</strong><br> 如果对方网站采用的是框架开发的话那么你面对的就是寻找框架的漏洞，如果是非框架的话寻找的漏洞针对的是代码写出来的漏洞<br> CMS识别：判定一个网站是用什么程序搭建的<br> 开源：去网上找寻漏洞文章。内部：常规的渗透测试，用扫描工具去判断。<br> 关于源码的获取途径：搜索，闲鱼淘宝，第三方源码站，各种行业对应。</p><h3 id="推导脚本格式的方法" tabindex="-1"><a class="header-anchor" href="#推导脚本格式的方法" aria-hidden="true">#</a> 推导脚本格式的方法</h3><p><strong>1.中间件、数据库和脚本语言会有一定的常规组合，可以进行反推。</strong><br> mysql数据库一般就是php脚本<br> sql server数据库一般就是 asp 或者 aspx<br> mongoDB一般就是python<br> IIS搭建平台一般就是使用 asp/aspx进行网站部署。<br> apache大多数都是php。<br> tomcat则是jsp居多。</p><p><strong>2.使用扫描工具。如果判断不出网站的脚本情况，有两种情况：1.网站做了伪静态（脚本类型不在网站地址上体现）</strong></p><p><strong>3.cookie值里经常会有phpsession或jspsession等，可以通过前缀来判断。如果没有，那一般就是asp或者aspx等其他。</strong></p><p>cms就是开源程序，而框架就是开发时用的工具。渗透框架的思想就是去找框架设计的问题。</p><p>一种是常规渗透测试就是黑盒测试，利用漏洞扫描工具去扫，人工去找（没有代码，通过网站功能进行测试）。另一种是知道cms，就可以利用网上的公开漏洞，因为可以得到源码（从代码中去找漏洞）。</p><h3 id="操作系统层面的安全" tabindex="-1"><a class="header-anchor" href="#操作系统层面的安全" aria-hidden="true">#</a> 操作系统层面的安全</h3><p>识别操作系统常见方法：</p><ol><li>有网站通过网站识别（部署在windows上的服务器的网站域名一般不区分大小写，而部署在Linux上的服务器域名是区分大小写的。），没有网站通过扫描相关的工具进行识别。（nmap；扫描命令：nmap -o IP地址）</li><li>网站路径不同。Windows有C、D这些盘，而Linux没有这些盘符。</li><li>Windows和Linux在大小写上有区别。</li><li>Windows有些产品放在Linux上不一样。Windows的产品放在Linux上不能运行，Linux的产品放在Windows上不能运行。</li><li>还可以通过TTL来判断服务器系统，相邻的值来判断。</li></ol><h3 id="数据库层面的安全" tabindex="-1"><a class="header-anchor" href="#数据库层面的安全" aria-hidden="true">#</a> 数据库层面的安全</h3><p><strong>数据库常见漏洞类型及攻击</strong>：弱口令<br><strong>数据库的分类</strong>：小型数据库：Access；中型数据库：MySQL；；大型数据库：SQLServer、Oracle等。<br><strong>网站识别</strong>：</p><ol><li>Asp + Access（windows） Access没有默认端口号</li><li>PHP + MySQL MySQL的默认端口：3306</li><li>Aspx + MsSQL（SQLserver）（windows） MsSQL 的默认端口：1433</li><li>Jsp + MsSQL， Oracle 端口：1521 Oracle 的默认端口：1521</li><li>Python +MongoDB 端口：27017 MongoDB 的默认端口：27017</li><li>（其中Access和MsSQL是不能在Linux上用，只支持Windows） 等等</li></ol><h3 id="第三方层面的安全" tabindex="-1"><a class="header-anchor" href="#第三方层面的安全" aria-hidden="true">#</a> 第三方层面的安全</h3><p>针对第三方平台或软件的判断，需要多层次判断，不能仅限于端口扫描，根据不同的应用采取不同的方法。<br> 如TeamViewer、PHPMyAdmin、VSFTPd等第三方软件。第三方软件无法通过网站发现，根据软件来选择探针的方式，如：端口扫描等。危害如：漏洞攻击和弱口令攻击获得权限。</p><h3 id="web网站的安全问题补充" tabindex="-1"><a class="header-anchor" href="#web网站的安全问题补充" aria-hidden="true">#</a> Web网站的安全问题补充</h3><p>除去常规Web安全以及APP安全测试外，类似服务器单一或复杂的其他服务（邮件、游戏、负载均衡等），也可以作为安全测试目标，此类目标测试原则只是少了Web应用或其他安全问题。所以明确安全测试思路是很重要的。</p><h2 id="加密编码" tabindex="-1"><a class="header-anchor" href="#加密编码" aria-hidden="true">#</a> 加密编码</h2><h3 id="常见加密编码等算法解析" tabindex="-1"><a class="header-anchor" href="#常见加密编码等算法解析" aria-hidden="true">#</a> 常见加密编码等算法解析</h3><p><strong>MD5</strong>：16位和32位，加密密文字符串由A-Z,0-9随机分配，80%网站管理员或用户密码加采取MD5加密；无法从密文直接得到明文，属于不可逆；网站上的MD5解密工具是通过枚举。<br><strong>SHA</strong>：分SHA1、SHA256、SHA512等；数字越大，生成的密文越长。密文长度是固定的。<br><strong>SHA1</strong>：长度是40位；密文由0-9，a-z随机组合；不可逆。<br><strong>ASC</strong>：类似SHA。<br><strong>进制</strong>：二进制、十进制、十六进制之间的转换。<br><strong>时间戳</strong>：10位数字；网站或者服务器脚本语言里经常会使用，会在数据库里用户登录和注销，注册里会使用。<br><strong>URL</strong>：网站域名后面有%数字等号这些就是URL编码；%开头加数字为一个字符，如%20是空格字符；浏览器只做一次加密，在渗透绕过的时候可能会使用二次，三次加密方式。<br><strong>BASE64</strong>：密文长度随明文的长度变化；密文是由A-Z，0-9，a-z大小写字母和数字混编；经常会在密文结尾出现两个等号；==；应用于web。<br><strong>Unescape</strong>：%开头的四位数字为一组，一组代表2个明文字符；应用于web。<br><strong>AES</strong>：一种安全的加密方式。遇到base64的密文解密后是乱码或者没有规律的文本的时候，大概率就是AES加密。解密需要密码和偏移量。<br><strong>DES</strong>：密文中会有加号&#39;+&#39;；密文长度随明文的长度变化；和AES类似，是带有参数的。</p><h3 id="常见加密形式算法解析" tabindex="-1"><a class="header-anchor" href="#常见加密形式算法解析" aria-hidden="true">#</a> 常见加密形式算法解析</h3><p>直接加密、带salt、带密码、带偏移、带位数、带模式、带干扰、自定义组合等。</p><h3 id="常见解密方式" tabindex="-1"><a class="header-anchor" href="#常见解密方式" aria-hidden="true">#</a> 常见解密方式</h3><p>枚举、自定义逆向算法、可逆向。</p><h3 id="了解常规加密算法的特性" tabindex="-1"><a class="header-anchor" href="#了解常规加密算法的特性" aria-hidden="true">#</a> 了解常规加密算法的特性</h3><p>长度位数、字符规律、代码分析、搜索获取等。</p><h2 id="cdn绕过" tabindex="-1"><a class="header-anchor" href="#cdn绕过" aria-hidden="true">#</a> CDN绕过</h2><p><strong>CDN</strong>：内容分发网络。CDN是构建在现有网络上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡，内容分发，调度等功能模块，使用户就近获取所需的内容，降低网络拥塞，提高用户访问命中率和响应速度，若目标存在CDN服务，则会影响后续的安全测试过程。<br><strong>如何判断目标存在CDN服务</strong>：利用多节点技术进行请求返回判断。<br><strong>目前常见的CDN绕过技术有哪些</strong>：子域名查询；邮件服务查询；国外地址请求；遗留文件，扫描全网；黑暗引擎搜索特定文件；DNS历史记录，以量打量。<br><strong>CDN真实IP地址获取后绑定指向地址</strong>：更改本地hosts解析指向文件。</p>',63);function _(T,f){const n=l("ExternalLinkIcon");return i(),o("div",null,[b,p,r("ol",null,[d,c,r("li",null,[r("p",null,[e("什么是二级域名、多级域名？"),g,e(" 从右到左：根域名、顶级域名、二级域名、三级域名。"),u,r("a",x,[e("news.baidu.com"),a(n)]),e("、"),r("a",S,[e("shehui.news.baidu.com"),a(n)])])]),w]),P])}const A=s(h,[["render",_],["__file","1.基础知识.html.vue"]]);export{A as default};
