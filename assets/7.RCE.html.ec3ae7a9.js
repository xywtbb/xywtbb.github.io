import{_ as n,V as s,W as a,Z as e}from"./framework.0d0b2430.js";const t={},p=e(`<h1 id="rce" tabindex="-1"><a class="header-anchor" href="#rce" aria-hidden="true">#</a> RCE</h1><h2 id="rce漏洞-远程命令-代码执行漏洞" tabindex="-1"><a class="header-anchor" href="#rce漏洞-远程命令-代码执行漏洞" aria-hidden="true">#</a> RCE漏洞（远程命令/代码执行漏洞）</h2><p><strong>定义：</strong></p><p>利用RCE漏洞，有两种执行方式，向后台服务器远程注入操作系统命令或者远程代码执行，也就是远程执行。通过上述的远程注入后，从而执行系统命令，进而控制后台系统。</p><p><strong>原理：</strong></p><p>一般出现这种漏洞，是因为应用系统从设计上需要给用户提供指定的远程命令操作的接口。比如我们常见的路由器、防火墙、入侵检测等设备的web管理界面上。一般会给用户提供一个ping操作的web界面，用户从web界面输入目标IP，提交后，后台会对该IP地址进行一次ping测试，并返回测试结果。 如果，设计者在完成该功能时，没有做严格的安全控制，则可能会导致攻击者通过该接口提交“意想不到”的命令，从而让后台进行执行，从而控制整个后台服务器。</p><p><strong>漏洞形成条件：</strong></p><p>可控变量：可以控制的变量为可控变量，比如通过网址的一个传参，通过参数值改变变量值。（能够输入自己写的一些数据）</p><p>漏洞函数：指的是哪个函数对这个变量进行操作。如：eval() (比如上传函数对应文件上传，查询函数对应sql注入，输出函数对应xss)</p><h3 id="远程代码执行" tabindex="-1"><a class="header-anchor" href="#远程代码执行" aria-hidden="true">#</a> 远程代码执行</h3><p>基于脚本，根据由对应编写的脚本产生不同的危害，如PHP执行出PHP命令，Java则是Java命令。</p><p>脚本语言：PHP、Java、Python</p><p><code>eval() </code>函数把字符串按照PHP代码来计算。该字符串必须是合法的PHP代码，且必须以分号结尾；如果没有在代码字符串中调用return语句，则返回NULL。如果代码中存在解析错误，则 <code>eval（）</code> 函数返回false。</p><h3 id="远程命令执行" tabindex="-1"><a class="header-anchor" href="#远程命令执行" aria-hidden="true">#</a> 远程命令执行</h3><p>基于系统，根据使用的系统产生不同的危害，Windows执行Windows命令，Linux执行Linux命令</p><h4 id="系统命令执行函数-php" tabindex="-1"><a class="header-anchor" href="#系统命令执行函数-php" aria-hidden="true">#</a> 系统命令执行函数（PHP）</h4><p><strong>system()</strong>：执行shell命令，向dos发送一条指令，如system(&quot;pause&quot;)可以实现冻结屏幕，便于观察程序的执行结果；system(&quot;CLS&quot;)可以实现清屏操作；而调用color函数可以改变控制台的前景色和背景。</p><div class="language-PHP line-numbers-mode" data-ext="PHP"><pre class="language-PHP"><code>int system(const char *command)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>passthru()</strong>：只调用命令，不返回任何结果，但把命令的运行结果原样地直接输出到标准输出设备上</p><p><strong>exec()</strong>：在PHP中，执行一个外部程序， exec() 执行 command 参数所指定的命令。</p><div class="language-PHP line-numbers-mode" data-ext="PHP"><pre class="language-PHP"><code>exec(string $command, array &amp;$output = ?, int &amp;$return_var = ?): string
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>shell_exec()</strong>：是PHP中的一个内置函数，用于通过shell执行命令并以字符串的形式返回完整的输出</p><p><strong>popen()</strong>：通过创建一个管道，调用 fork 产生一个子进程，执行一个 shell 以运行命令来开启一个进程。这个进程必须由 pclose() 函数关闭，而不是 fclose() 函数。pclose() 函数关闭标准 I/O 流，等待命令执行结束，然后返回 shell 的终止状态。如果 shell 不能被执行，则 pclose() 返回的终止状态与 shell 已执行 exit 一样</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token constant">FILE</span> <span class="token operator">*</span> <span class="token function">popen</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> char <span class="token operator">*</span> command <span class="token punctuation">,</span> <span class="token keyword">const</span> char <span class="token operator">*</span> type <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword type-declaration">int</span> <span class="token function">pclose</span> <span class="token punctuation">(</span> <span class="token constant">FILE</span> <span class="token operator">*</span> stream <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>pcntl_exec()</strong>：在当前进程空间执行指定程序</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword type-declaration">void</span> <span class="token function">pcntl_exec</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$path</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$args</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$envs</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="windows-管道符-系统命令拼接" tabindex="-1"><a class="header-anchor" href="#windows-管道符-系统命令拼接" aria-hidden="true">#</a> Windows 管道符 （系统命令拼接）</h4><p>&quot;|&quot; : 将符号前的进程输出作为符号后进程的输入，也可以说直接执行后面的语句。 &quot;||&quot; : 前面的语句执行出错则执行后面的语句 &quot;&amp;&quot; : 前面的语句为假则执行后面的语句 &quot;&amp;&amp;&quot; : 前面的语句为假，直接出错，前面的语句为真，执行后面的语句</p><h3 id="防御方案" tabindex="-1"><a class="header-anchor" href="#防御方案" aria-hidden="true">#</a> 防御方案</h3><p><strong>尽量不要使用命令执行函数。</strong><strong>不要让用户控制参数。</strong><strong>执行前作号检测和过滤。</strong><strong>变量过滤或固定：</strong></p><blockquote><p>代码执行是多样性的，不像sql注入一样存在固定的关键字，可以使用各种函数进行代替，所以过滤变量值不显示，可以改为固定变量值，只允许使用某一种命令。</p></blockquote><p><strong>WAF产品防火墙防护</strong> 找到市面上的一些安全产品进行防护</p><p><strong>敏感函数禁用</strong><strong>PHP</strong> eval：把字符串作为php进行执行 assert：断言 call_user_func():把第一个参数作为回调参数 call_user_func_array():调用回到函数，并把第一个数组参数作为回到函数的参数 array_map():为数组的每个元素应用回调参数</p><p><strong>python</strong> exec</p><p><strong>Java</strong> Java中没有类似php中的eval函数可以直接将字符串转为代码进行执行的函数 但是存在反射机制，OGNL、SpEL等（存在相关利用的功能）</p><p><strong>命令执行函数</strong> system()：执行外部程序并输出显示 exec()：执行一个外部程序 shell_exec()：通过shell环境执行命令，并将完整的输出以字符串的方式返回 passthru()：执行外部命令并显示原始输出 pcntl_exec()：在当前进程空间执行指定程序</p><p>\`\`反引号()：</p><div class="language-PHP line-numbers-mode" data-ext="PHP"><pre class="language-PHP"><code>&lt;?php
echo \`abc\`;
?&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38),o=[p];function r(c,l){return s(),a("div",null,o)}const d=n(t,[["render",r],["__file","7.RCE.html.vue"]]);export{d as default};
