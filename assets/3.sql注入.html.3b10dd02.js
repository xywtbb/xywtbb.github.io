import{_ as n,V as s,W as a,Z as e}from"./framework.0d0b2430.js";const p={},t=e(`<h1 id="sql注入" tabindex="-1"><a class="header-anchor" href="#sql注入" aria-hidden="true">#</a> SQL注入</h1><h2 id="sql注入的基础知识" tabindex="-1"><a class="header-anchor" href="#sql注入的基础知识" aria-hidden="true">#</a> sql注入的基础知识</h2><p><strong>原理</strong>：通过构建特殊的输入数据传入web应用程序，从而输入的数据会被当作后端代码执行。</p><p><strong>哪几类</strong>：</p><p>按变量类型分：数字型(一般直接写)、字符型（会用到单引号和括号）；</p><p>按HTTP提交方式分类：GET型注入、POST型注入、Cookie注入、HTTP头部注入；</p><p>按注入方式分类：报错注入、盲注、UNION注入、布尔型注入、时间注入、宽字节注入（主要针对GBK编码类型）。</p><h2 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql" aria-hidden="true">#</a> MySQL</h2><p>MySQL5.0以上存在一个存储着数据库信息的信息数据库 INFORMATION_SCHEMA ，其中保存着关于MySQL服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权限等。<code>information_schema</code></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span>：记录所有表名信息的表

information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span>：记录所有列名信息的表

table_name：表名

column_name：列名

table_schema：数据库名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>文件读写</strong>：load_file() : 读取函数；into outfile 或 into dumpfile : 导出函数</p><h3 id="魔术引号" tabindex="-1"><a class="header-anchor" href="#魔术引号" aria-hidden="true">#</a> 魔术引号</h3><p>php.ini中存在 magic_quotes_gpc 选项或者 addslashes() 函数，称为魔术引导，此选项打开，使用GET，POST，cookie所接收的 ‘ 单引号、 “ 双引号、 \\ 反斜线和 NULL 字符全部被加上一个反斜线转义。此时，注入类型是字符型注入已经无法构成威胁。采用编码或宽字节绕过（%df）。</p><h3 id="get和post的区别" tabindex="-1"><a class="header-anchor" href="#get和post的区别" aria-hidden="true">#</a> GET和POST的区别</h3><ol><li><p>get请求一般是去取获取数据（其实也可以提交，但常见的是获取数据）； post请求一般是去提交数据。</p></li><li><p>get因为参数会放在url中，所以隐私性，安全性较差，请求的数据长度是有限制的， 不同的浏览器和服务器不同，一般限制在 2~8K 之间，更加常见的是 1k 以内； post请求是没有的长度限制，请求数据是放在body中；</p></li><li><p>get请求刷新服务器或者回退没有影响，post请求回退时会重新提交数据请求。</p></li><li><p>get请求可以被缓存，post请求不会被缓存。</p></li><li><p>get请求会被保存在浏览器历史记录当中，post不会。get请求可以被收藏为书签，因为参数就是url中，但post不能。它的参数不在url中。</p></li><li><p>get请求只能进行url编码（appliacation-x-www-form-urlencoded）,post请求支持多种（multipart/form-data等）。</p></li><li><p>GET 和 POST都是http请求方式， 底层都是 TCP/IP协议；通常GET 产生一个 TCP 数据包；POST 产生两个 TCP 数据包（但firefox是发送一个数据包），</p></li><li><p>对于 GET 方式的请求，浏览器会把 http header 和 data 一并发送出去，服务器响应 200 （返回数据）表示成功；而对于 POST，浏览器先发送 header，服务器响应 100， 浏览器再继续发送 data，服务器响应 200 （返回数据）。</p></li></ol><p>其中SQL语句干扰符号：‘、“、%、）、}等，具体需看写法。</p><p>在数据库中 注释符位 --空格；在URL中为 --+；</p><p>井号 # 在数据库中也是注释符。</p><h3 id="盲注" tabindex="-1"><a class="header-anchor" href="#盲注" aria-hidden="true">#</a> 盲注</h3><p><strong>基于布尔</strong>：盲注查询是不需要返回结果的，仅判断语句是否正常执行即可，所以其返回可以看到一个布尔值，正常显示为true，报错或者是其他不正常显示为False。</p><p>left；ascii；mid；regexp；like。</p><p><strong>基于时间</strong>：如论我们输入的语句是否合法，页面的显示信息是固定的，即不会出现查询的信息，也不会出现报错信息。可以尝试基于时间的盲注来测试。根据页面响应的时间，来判断输入的信息是否正确。在可以判断返回正确还是错误的情况下，两种注入方法都可以用，延时注入更倾向于无法判断正误，通过自己构造页面刷新时间来判断正误。 if；sleep</p><p><strong>基于报错</strong>： 基于报错的盲注是通过输入特定语句使页面报错，网页中则会输出相关错误信息，从而是我们得到想要的基本信息——数据库名、版本、用户名等。</p><p>【主键重复（duplicate entry）】floor（返回小于等于该值的最大整数）；</p><blockquote><p>只要是count，rand()，group by三个连用就会造成这种主键重复报错。</p></blockquote><p>【xpath语法错误】updatexml（修改查询到的内容）；extractvalue（查询节点内容）。</p><blockquote><p>它们的第二个参数都要求是xpath语法的字符串，如果不满足要求则会报错，并且将查询结果放在报错信息里。</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code> <span class="token operator">like</span> <span class="token string">&#39;ro%&#39;</span>             判断<span class="token operator">or</span> 或者ro 是否成立
 <span class="token operator">regexp</span> <span class="token string">&#39;^xiaodi [a-z]&#39;</span>         匹配xiaodi及xiaodi<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>等
 <span class="token keyword">if</span>（条件，<span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span>）          条件成立，返回<span class="token number">5</span> 反之 返回 <span class="token number">0</span>
 sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>              <span class="token keyword">SQL</span>语句延时执行<span class="token number">5</span>秒
 mid（a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c）           从位置b开始，截取a字符串的c位
 substr（a，b，c）         从b位置开始，截取字符串a的位置
 <span class="token keyword">left</span>（<span class="token keyword">database</span>（），<span class="token number">1</span>）       <span class="token keyword">left</span>（a，b） 从左截取a的前b位；猜取数据库名
 <span class="token keyword">left</span>（version（），<span class="token number">1</span>）        猜取版本号
 length（<span class="token keyword">database</span>（））<span class="token operator">=</span> <span class="token number">8</span>      判断数据库名的长度
 ord <span class="token operator">=</span> ascii ascii（x）<span class="token operator">=</span> <span class="token number">97</span>      判断ascii码是否等于<span class="token number">97</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dns注入" tabindex="-1"><a class="header-anchor" href="#dns注入" aria-hidden="true">#</a> DNS注入</h3><p>DNSlog：解决了盲注不能回显数据，效率低等问题，盲注解决了没有回显的问题。当盲注跑数据太慢的情况下，可以选择DNS注入。</p><p>原理：域名<strong>DNS</strong>指向的是我们服务器的域名，意味着解析域名时需向<strong>DNS</strong>服务器查询。通过递归查询可以获取数据库上的信息。要记住整个域名内的节点标签被限制在<strong>63</strong>个字符长度大小。</p><p>使用条件:</p><ol><li>有sql注入点。</li><li>该站点的<code>load_file</code>可以使用</li></ol><h3 id="中转注入" tabindex="-1"><a class="header-anchor" href="#中转注入" aria-hidden="true">#</a> 中转注入</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>python sqlmap.py -u &quot;http://127.0.0.1/test.php?x=&quot; -v -3

<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token variable">$url</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;http://dudu.com?id=&#39;</span><span class="token punctuation">;</span>

<span class="token variable">$urls</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;x&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$urls</span> <span class="token operator">=</span> <span class="token variable">$url</span> <span class="token operator">.</span> <span class="token variable">$payload</span><span class="token punctuation">;</span>

<span class="token function">file_get_contents</span><span class="token punctuation">(</span>urls<span class="token punctuation">)</span><span class="token punctuation">;</span>

\\<span class="token comment">#echo $urls;</span>

<span class="token delimiter important">?&gt;</span></span>

php中.号表示拼接
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二次注入" tabindex="-1"><a class="header-anchor" href="#二次注入" aria-hidden="true">#</a> 二次注入</h3><p>原理：攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到SQL查询语句所导致的注入</p><p>具备条件：</p><ol><li>用户向数据库插入恶意语句（即使后端代码对语句进行了转义，如mysql_escape_string、mysql_real_escape_string转义）</li><li>数据库对自己存储的数据非常放心，直接取出恶意数据给用户</li></ol><h3 id="sql堆叠" tabindex="-1"><a class="header-anchor" href="#sql堆叠" aria-hidden="true">#</a> sql堆叠</h3><p><strong>定义</strong>：堆叠注入，就是将语句堆叠在一起进行查询。</p><p><strong>原理</strong>：<code>mtsql_multi_query()</code>支持多条sql语句同时执行，用<code>；</code>分隔，成堆的执行sql语句。</p><h3 id="waf手工绕过" tabindex="-1"><a class="header-anchor" href="#waf手工绕过" aria-hidden="true">#</a> WAF手工绕过</h3><p><strong>应用层</strong>：</p><p>大小写和关键词替换（and和or可以用&amp;&amp;和||代替）</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">UnIoN</span><span class="token comment">/**/</span><span class="token keyword">SeLeCT</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

Hex<span class="token punctuation">(</span><span class="token punctuation">)</span> bin<span class="token punctuation">(</span><span class="token punctuation">)</span> 等价于 ascii<span class="token punctuation">(</span><span class="token punctuation">)</span>

sleep<span class="token punctuation">(</span><span class="token punctuation">)</span> 等价于 benchmark<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">Mid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> substring<span class="token punctuation">(</span><span class="token punctuation">)</span> 等价于 substr<span class="token punctuation">(</span><span class="token punctuation">)</span>

@<span class="token variable">@user</span> 等价于 <span class="token keyword">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

@<span class="token variable">@Version</span> 等价于 version<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>各种编码</strong></p><p>大小写，URL，hex，%0A等</p><p><strong>注释使用</strong></p><p>//、--、--+、#、/* <em>/、+、:%00、/!</em> */</p><p><strong>再次循环</strong></p><p>union==unionnion</p><p><strong>等价替换</strong></p><p>user()=@@user() and=&amp; or=| ascii=hex等</p><p><strong>参数污染</strong></p><p>?id=1&amp;id=2&amp;id=3</p><p><strong>编码解码及加密解密</strong></p><p>s-&gt;%73-&gt;%25%37%33</p><p>hex, unlcode, base64等</p><p><strong>更改请求提交方式</strong></p><p>Get Post Cookie等</p><p>Post-&gt;multipart / form-data</p><p><strong>中间件HPP参数污染</strong></p><h3 id="sqlmap绕过waf" tabindex="-1"><a class="header-anchor" href="#sqlmap绕过waf" aria-hidden="true">#</a> SQLMAP绕过WAF</h3><p>sqlmap绕狗子时候，如果写的python脚本被拦截，有三种方式，延时，爬虫探测，代理池；其他参数狗子检测时，先保存为txt文本，然后-r，进行绕过，也可以中转注入进行本地数据包修改而后注入，本地搭建脚本（请求数据包自定义编写）；也可以写入本地php数据包，修改header头。</p><p>部分WAF有提供爬虫白名单的功能，识别爬虫的技术一般有两种：</p><ol><li>根据userAgent（UserAgent可以很容易欺骗，我们可以伪装成爬虫尝试绕过。）</li><li>通过行为来判断</li></ol><h3 id="防御" tabindex="-1"><a class="header-anchor" href="#防御" aria-hidden="true">#</a> 防御</h3><ol><li><p>解决SQL注入最推荐的方法：PreparedStatement预编译+PDO预处理绑定数据。采用PreparedStatement，就会将sql语句预先编译好，也就是SQL引擎会预先进行语法分析，产生语法树，生成执行计划，也就是说，后面你输入的参数，无论你输入的是什么，都不会影响该sql语句的 语法结构了，因为语法分析已经完成了，而语法分析主要是分析sql命令，比如 select ,from ,where ,and, or ,order by 等等。所以即使你后面输入了这些sql命令，也不会被当成sql命令来执行了，因为这些sql命令的执行， 必须先的通过语法分析，生成执行计划，既然语法分析已经完成，已经预编译过了，那么后面输入的参数，是绝对不可能作为sql命令来执行的，只会被当做字符串字面值参数。</p><p>PDO预处理，简单说一下就是原理跟上面的差不多，把执行语句和变量分开，变量分别绑定，分别传参，从而阻止了注入。</p></li><li><p>另一个防御的点就是 对输入一视同仁，无论输入来自用户还是存储，在进入到 SQL 查询前都对其进行过滤、转义。</p></li></ol>`,69),i=[t];function l(o,r){return s(),a("div",null,i)}const d=n(p,[["render",l],["__file","3.sql注入.html.vue"]]);export{d as default};
