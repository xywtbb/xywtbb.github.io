import{_ as e,V as a,W as i,Z as l}from"./framework.0d0b2430.js";const p={},n=l(`<h1 id="文件上传" tabindex="-1"><a class="header-anchor" href="#文件上传" aria-hidden="true">#</a> 文件上传</h1><p>**定义：**文件上传漏洞是指由于程序员在对用户文件上传部分的控制不足或者处理缺陷，而导致的用户可以越过其本身权限向服务器上上传可执行的动态脚本文件。这里的上传可以是木马，病毒恶意脚本，或者webshell等。文件上传本身并无问题，问题是服务器怎么处理解析文件。</p><blockquote><p>webshell就是以asp，php，jsp等网页文件形式存在的一种命令执行环境。也可以称为一种网页后门。在入侵一个网站后，会将这些asp或者php后门文件与网站服务器web目录下正常的网页混在一起，然后用浏览器访问这些后门，得到一个命令执行环境，以达到控制服务器的目的（可以上传下载文件，操作数据库，执行任意命令）</p></blockquote><p>**原理：**在文件上传的功能处，若服务端脚本语言未对上传的文件进行严格验证和过滤，导致恶意用户上传恶意的脚本文件时，就有可能获取执行服务端命令的能力，这就是文件上传漏洞。比如相册、头像上传，视频、照片分享以及论坛发帖和邮箱等。</p><h2 id="前端检测" tabindex="-1"><a class="header-anchor" href="#前端检测" aria-hidden="true">#</a> 前端检测：</h2><p>**原理：**通过前端JS代码进行校验检测。</p><p>**如何判断是前端JS验证：**前端验证通过以后，表单成功提交后会通过浏览器发出─条网络请求，但是如果前端验证不成功，则不会发出这项网络请求;可以在浏览器的网络元素中查看是否发出了网络请求。</p><p><strong>绕过：</strong></p><ol><li>删除或禁用JS</li></ol><blockquote><p>火狐浏览器--&gt;about:config--&gt;JavaScriptenable-false (ajax)</p></blockquote><ol start="2"><li>使用代理上传文件，Burp Suite；上传符合要求的文件类型，抓包修改文件类型。</li><li>删除代码中onsubmit事件中关于文件上传时验证上传文件的相关代码即可：</li></ol><h2 id="后端检测" tabindex="-1"><a class="header-anchor" href="#后端检测" aria-hidden="true">#</a> 后端检测：</h2><p>**原理：**通常是针对文件的后缀名、类型和文件头进行检测，主要通过黑白名单进行过滤检测，如果不符全过滤规则则不允许上传。</p><h3 id="黑白名单" tabindex="-1"><a class="header-anchor" href="#黑白名单" aria-hidden="true">#</a> 黑白名单</h3><p>一般有个blacklist文件，里面会包含常见的危险脚本文件。</p><p><strong>绕过：</strong></p><ol><li>解析漏洞</li><li>截断上传（%00）</li></ol><blockquote><p>原理：由于00代表结束符，所以会把00后面的所有字符都截断。例：1.php%00 条件：PHP版本小于5.3.5，PHP的magic_quotes_gpc为OFF状态</p></blockquote><ol start="3"><li>大小写绕过（aSp、PHp）</li><li>双写绕过（pphphp）</li></ol><h3 id="mime检测" tabindex="-1"><a class="header-anchor" href="#mime检测" aria-hidden="true">#</a> MIME检测</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>text/plain （纯文本） 
text/html （HTML文档） 
text/javascript （js代码） 
application/xhtml+xml （XHTML文档） 
image/gif （GIF图像） 
image/jpeg （JPEG图像） 
image/png （PNG图像） 
video/mpeg （MPEG动画） 
application/octet-stream （二进制数据） 
application/pdf （PDF文档）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在文件上传过程中，服务端会针对我们的上传文件生成一个数组，这个数组其中有一项就是这个文件的类型<code>file_type</code>；服务端对文件进行检测时，就是通过检测脚本中的黑白名单和这个数组中的<code>file_type</code>进行对比，如果符合要求就允许上传这个文件。</p><p>**绕过：**部分Web应用系统判定文件类型是通过<code>content-type字段</code>，黑客可以通过抓包，将<code>content-type字段</code>改为常见的<code>图片类型</code>，如<code>image/gif</code>，从而绕过校验。</p><h3 id="文件头检测" tabindex="-1"><a class="header-anchor" href="#文件头检测" aria-hidden="true">#</a> 文件头检测</h3><p>图片马一句话制作方法：png /b + shell.php /a webshell.jpg</p><p>GIF：<code>47 49 46 38 39 61</code> png：<code>89 50 4E 47 0D 0A 1A 0A</code> JPG：<code>FF D8 FF E0 00 10 4A 46 49 46</code></p><p>在进行<code>文件头绕过</code>时，我们可以把上面的<code>文件头</code>添加到我们的一句话木马内容最前面，达到绕过文件头检测的目的。</p><h3 id="条件竞争漏洞" tabindex="-1"><a class="header-anchor" href="#条件竞争漏洞" aria-hidden="true">#</a> 条件竞争漏洞</h3><p>**定义：**条件竞争漏洞是一种服务器端的漏洞，由于服务器端在处理不同的请求时是并发进行的，因此如果并发处理不当或相关操作顺序设计的不合理时，将会导致此类问题的发生。</p><p><strong>原理：</strong></p><p>上传文件源代码里没有校验上传的文件，文件直接上传，上传成功后才进行判断：如果文件格式符合要求，则重命名，如果文件格式不符合要求，将文件删除由于服务器并发处理(同时)多个请求，假如a用户上传了木马文件，由于代码执行需要时间，在此过程中b用户访问了a用户上传的文件，会有以下三种情况：</p><ol><li>访问时间点在上传成功之前，没有此文件</li><li>访问时间点在刚上传成功但还没有进行判断，该文件存在</li><li>访问时间点在判断之后，文件被删除，没有此文件</li></ol><h3 id="二次渲染" tabindex="-1"><a class="header-anchor" href="#二次渲染" aria-hidden="true">#</a> 二次渲染</h3><p>**原理：**在我们上传文件后，网站会对图片进行二次处理（格式、尺寸要求等），服务器会把里面的内容进行替换更新，处理完成后，根据我们原有的图片生成一个新的图片并放到网站对应的标签进行显示。</p><p><strong>绕过：</strong></p><p>1、配合文件包含漏洞： 将一句话木马插入到网站二次处理后的图片中，也就是把一句话插入图片在二次渲染后会保留的那部分数据里，确保不会在二次处理时删除掉。这样二次渲染后的图片中就存在了一句话，在配合文件包含漏洞获取webshell。</p><p>2、可以配合条件竞争： 这里二次渲染的逻辑存在漏洞，先将文件上传，之后再判断，符合就保存，不符合删除，可利用条件竞争来进行爆破上传</p><p><strong>判断是否进行了二次处理：</strong></p><p>对比要上传图片与上传后的图片大小，使用<code>16进制编辑器</code>打开图片查看上传后保留了哪些数据，查看那些数据被改变。</p><h3 id="文件上传在实际应用中的方式" tabindex="-1"><a class="header-anchor" href="#文件上传在实际应用中的方式" aria-hidden="true">#</a> 文件上传在实际应用中的方式</h3><ol><li>先直接传一个PHP，实战先传马；实战先传一个正常的图片，看看有无返回存储地址；如果能直接上传并解析，已离成功不远。</li><li>先传一个shell，然后进行修改；connect-Type:image/jpeg，看看是否可以进行绕过，如果不行，在上传内容添加GIF89a；当然上传了还得看是否能够被解析为php，所有的上传都要考虑是否能够被解析。</li><li>上传一个abc.abcd，目的只是为了查看是否为白名单还是黑名单绕过；黑名单限制一般为此文件类型不允许上传，考虑双写、大小写、空格、php2、php3、php4、php5、pht、phtml,等方式我们继续上传一个/htaccess文件；.htaccess文件能够设置服务器的解析文件的格式，匹配到dudu就已php的格式来解析，继而上传马；如果说.htaccess不能上传，接下来上传一个.user.ini，继而上传一个马。</li><li>如果白名单限制上传；考虑00截断上传；文件包含漏洞+图片马；文件包含漏洞+二次渲染+图片马 。</li><li>上传的东西是否被服务器很快的删除或者移除，或者说上传成功，但是无法访问，就得考虑条件竞争。</li></ol><p>以上均不行，考虑逻辑层面的思路。</p><h3 id="waf绕过" tabindex="-1"><a class="header-anchor" href="#waf绕过" aria-hidden="true">#</a> WAF绕过</h3><p><strong>上传参数名解析：明确哪些参数名可以修改：</strong></p><p>Content-Disposition：一般可更改（from-fata）接受表单的数据 Name：表单参数值，不能更改。 Filename：文件名，可以更改。 Connect-Type：文件MIME。视情况而定。</p><p><strong>常见绕过方法：</strong> 数据溢出-防匹配（xxx…）：也就是垃圾数据使得WAF无法匹配。 符号变异-防匹配（‘ “ ；）：匹配’ ’以及“”里面的内容，没匹配到，所以绕过 数据截断-防匹配（%00；换行） 重复数据-防匹配（参数多次） 主要是绕过狗子，然后进行绕过</p>`,46),d=[n];function t(o,c){return a(),i("div",null,d)}const r=e(p,[["render",t],["__file","4.文件上传.html.vue"]]);export{r as default};
