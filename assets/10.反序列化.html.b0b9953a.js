import{_ as n,V as a,W as s,Z as t}from"./framework.0d0b2430.js";const e="/images/Web安全/反序列化结构图.png",p="/images/Web安全/Java反序列化.png",c="/images/Web安全/Java反序列化标志.jpg",o={},i=t(`<h1 id="反序列化" tabindex="-1"><a class="header-anchor" href="#反序列化" aria-hidden="true">#</a> 反序列化</h1><h2 id="序列化与反序列化定义" tabindex="-1"><a class="header-anchor" href="#序列化与反序列化定义" aria-hidden="true">#</a> 序列化与反序列化定义：</h2><p>**序列化：**将对象的状态信息转换为可以存储或传输的形式的过程。再序列化期间，对象将其当前状态写入到临时或持久性存储区。**反序列化：**从存储区中读取该数据，并将其还原为对象的过程，称为反序列化。</p><p>如Java、php、js、c#等脚本代码进行序列化就会成为二进制、XML、Json等数据；同样这些数据进行反序列化就会成为代码形式。</p><h3 id="php反序列化" tabindex="-1"><a class="header-anchor" href="#php反序列化" aria-hidden="true">#</a> PHP反序列化</h3><p><strong>原理：</strong></p><p>未对用户输入的序列化字符串进行检测，导致攻击者可以控制反序列化过程，从而导致代码执行，SQL注入，目录遍历等不可控后果。在反序列化的过程中自动触发了某些魔术方法。当进行反序列化的时候就有可能会触发对象中的一些魔术方法。</p><p><code>serialize（）</code> 将一个对象转换成一个字符串</p><p><code>unserialize()</code>将字符串还原成一个对象</p><p><strong>触发原因：</strong></p><p><code>unserialize</code>函数的变量可控，文件中存在可利用的类，类中有魔术方法：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//创建对象时触发</span>
<span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//对象被销毁时触发</span>
<span class="token function">__call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//在对象上下文中调用不可访问的方法时触发</span>
<span class="token function">__callStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//在静态上下文中调用不可访问的方法时触发</span>
<span class="token function">__get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//用于从不可访问的属性读取数据</span>
<span class="token function">__set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//用于将数据写入不可访问的属性</span>
<span class="token function">__isset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//在不可访问的属性上调用isset()或empty()触发</span>
<span class="token function">__unset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//在不可访问的属性上使用unset()时触发</span>
<span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//当脚本尝试将对象调用为函数时触发</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+e+'" alt="反序列化结构图" loading="lazy"></p><h3 id="java反序列化" tabindex="-1"><a class="header-anchor" href="#java反序列化" aria-hidden="true">#</a> Java反序列化</h3><p><img src="'+p+'" alt="Java反序列化" loading="lazy"></p><h4 id="java中的api实现" tabindex="-1"><a class="header-anchor" href="#java中的api实现" aria-hidden="true">#</a> Java中的API实现：</h4><p><strong>位置：</strong> Java.io.ObjectOutputStream java.io.ObjectInputStream</p><p><strong>序列化：</strong> ObjectOutputStream类 --&gt; writeObkect()</p><p>注：该方法对参数指定的obj对象进行序列化，把字节序列化写到一个目标输出流中按Java的标准约定是给文件一个.ser扩展名。</p><p><strong>反序列化：</strong> ObjectInputStream类 --&gt; readObject()</p><p>注：该方法从一个源输入流中读取字节序列，再把它们反序列化为一个对象，并将其返回。</p><h4 id="_2020-网鼎杯-web-think-java真题复现" tabindex="-1"><a class="header-anchor" href="#_2020-网鼎杯-web-think-java真题复现" aria-hidden="true">#</a> 2020-网鼎杯-Web-think_java真题复现</h4><p><img src="'+c+'" alt="Java反序列化标志" loading="lazy"></p><p>反弹shell</p>',24),l=[i];function r(u,d){return a(),s("div",null,l)}const m=n(o,[["render",r],["__file","10.反序列化.html.vue"]]);export{m as default};
